//
//  XRMobileDeviceDiscoveryPlugIn.xrplugin.h
//  MacDemo
//
//  Created by szzc on 2016/11/25.
//  Copyright © 2016年 szzc. All rights reserved.
//

#ifndef XRMobileDeviceDiscoveryPlugIn_xrplugin_h
#define XRMobileDeviceDiscoveryPlugIn_xrplugin_h
//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct _AMDServiceConnection;

struct _AMDevice;

struct _CSTypeRef {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _XRDeviceTimeInfo {
    unsigned long long _field1;
    unsigned long long _field2;
    struct mach_timebase_info _field3;
};

struct mach_timebase_info {
    unsigned int _field1;
    unsigned int _field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    struct _AMDevice *deviceRef;
    struct _AMDServiceConnection *notificationRef;
} CDStruct_fe0e0a34;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/PlugIns/XRMobileDeviceDiscoveryPlugIn.xrplugin/Contents/MacOS/XRMobileDeviceDiscoveryPlugIn
// UUID: 5CCC4A1F-0C96-3FAC-8372-D4E10DEEB375
//
//                           Arch: x86_64
//                 Source version: 61503.0.0.0.0
//       Minimum Mac OS X version: 10.11.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../../Frameworks
//                               = /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks
//                       Run path: @loader_path/../../../../../../../SharedFrameworks
//                               = /Applications/Xcode.app/Contents/SharedFrameworks
//                       Run path: @loader_path/../../../../../../../Developer/Library/PrivateFrameworks
//                               = /Applications/Xcode.app/Contents/Developer/Library/PrivateFrameworks
//

@protocol DTXAllowedRPC <NSObject>
@end

@protocol DTiPhoneSimulatorSessionDelegate <NSObject>
- (void)session:(DTiPhoneSimulatorSession *)arg1 didEndWithError:(NSError *)arg2;
- (void)session:(DTiPhoneSimulatorSession *)arg1 didStart:(BOOL)arg2 withError:(NSError *)arg3;

@optional
- (void)sessionWillLaunchApplication:(DTiPhoneSimulatorSession *)arg1;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>

@optional
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveService:(NSNetService *)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didRemoveDomain:(NSString *)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindService:(NSNetService *)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didFindDomain:(NSString *)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(NSNetServiceBrowser *)arg1 didNotSearch:(NSDictionary *)arg2;
- (void)netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)arg1;
- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *)arg1;
@end

@protocol NSNetServiceDelegate <NSObject>

@optional
- (void)netService:(NSNetService *)arg1 didAcceptConnectionWithInputStream:(NSInputStream *)arg2 outputStream:(NSOutputStream *)arg3;
- (void)netService:(NSNetService *)arg1 didUpdateTXTRecordData:(NSData *)arg2;
- (void)netServiceDidStop:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotResolve:(NSDictionary *)arg2;
- (void)netServiceDidResolveAddress:(NSNetService *)arg1;
- (void)netServiceWillResolve:(NSNetService *)arg1;
- (void)netService:(NSNetService *)arg1 didNotPublish:(NSDictionary *)arg2;
- (void)netServiceDidPublish:(NSNetService *)arg1;
- (void)netServiceWillPublish:(NSNetService *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol XRWirelessDeviceAuthorizedAPI <DTXAllowedRPC>
- (NSData *)challenge:(NSData *)arg1;
@end

@interface XRSimulatorDevice : XRRemoteDevice <DTiPhoneSimulatorSessionDelegate>
{
    NSMutableSet *_pendingSimulatorSessions;
    NSMutableDictionary *_simulatorSessionByPid;
    NSString *_simCompanionDeviceIdentifier;
    BOOL _deviceBooted;
    BOOL _legacySimulator;
    NSString *_runtimeSDKPath;
    SimDevice *_rawSimDevice;
    unsigned long long _deviceState;
}

+ (void)initialize;
@property unsigned long long deviceState; // @synthesize deviceState=_deviceState;
@property BOOL legacySimulator; // @synthesize legacySimulator=_legacySimulator;
@property(retain) SimDevice *rawSimDevice; // @synthesize rawSimDevice=_rawSimDevice;
@property(copy) NSString *runtimeSDKPath; // @synthesize runtimeSDKPath=_runtimeSDKPath;
@property(nonatomic) BOOL deviceBooted; // @synthesize deviceBooted=_deviceBooted;
@property(copy) NSString *companionDeviceIdentifier; // @synthesize companionDeviceIdentifier=_simCompanionDeviceIdentifier;
- (void).cxx_destruct;
- (id)_supportedKDebugEvents:(id *)arg1;
- (void)addObserver:(id)arg1 forPid:(int)arg2;
- (BOOL)isRunningPid:(int)arg1;
- (void)enableLiveSymbolicatorService:(BOOL)arg1;
- (BOOL)currentDeviceTime:(struct _XRDeviceTimeInfo *)arg1;
- (struct _CSTypeRef)createSymbolicatorForPid:(int)arg1;
- (struct _CSTypeRef)createKernelSymbolicator;
- (id)_dtkpCPU:(id *)arg1;
- (void)simulateMemoryWarning:(id)arg1;
- (id)deviceArchitecture;
- (void)bootDevice;
- (void)bootDeviceWaitForCompletion:(BOOL)arg1;
- (void)session:(id)arg1 didEndWithError:(id)arg2;
- (void)session:(id)arg1 didStart:(BOOL)arg2 withError:(id)arg3;
- (void)_terminateSession:(id)arg1;
- (id)_submitSessionRequest:(id)arg1 waitForCompletion:(BOOL)arg2;
- (id)architecturesForPath:(id)arg1;
- (void)terminateProcess:(id)arg1;
- (int)launchProcess:(id)arg1 suspended:(BOOL)arg2 error:(id *)arg3;
- (void)prepareConnection:(id)arg1;
- (id)makeConnection;
- (BOOL)isSimulator;
- (BOOL)isAppleInternal;
- (BOOL)isOnLine;
- (BOOL)isLocal;
- (id)deviceRootPath;
- (id)fileSystem;
- (BOOL)updateInstalledExecutables;
- (id)_overrideCapabilitiesWithRecordOptionsVersion:(long long)arg1;
- (void)unpairFromCompanion:(id)arg1;
- (void)pairWithCompanion:(id)arg1;
- (id)initWithSimDevice:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRSimulatorDeviceLocator : XRDeviceDiscovery
{
    unsigned long long _notificationRegistration;
}

- (void)_toggleSimDeviceState:(id)arg1;
- (id)deviceManagementItems;
- (id)deviceManagementName;
- (id)deviceList;
- (void)stopListeningForDevices;
- (void)addAllUnknownSimulatorDevices;
- (void)startListeningForDevices;

@end

@interface XRMobileDeviceLocator : XRDeviceDiscovery <NSNetServiceBrowserDelegate, NSNetServiceDelegate>
{
    NSNetServiceBrowser *_netServiceBrowser;
    NSMutableSet *_knownServices;
    struct _AMDeviceNotificationContext *_deviceNotificationRef;
}

+ (void)disableWirelessServiceForWiredDevice:(id)arg1;
+ (void)enableWirelessService:(id)arg1 forWiredDevice:(id)arg2;
+ (BOOL)mobileDeviceWirelessSupported;
+ (void)initialize;
- (void).cxx_destruct;
- (id)imageForDeviceType:(id)arg1 deviceColorString:(id)arg2 deviceEnclosureColorString:(id)arg3;
- (void)netServiceDidStop:(id)arg1;
- (void)netService:(id)arg1 didNotResolve:(id)arg2;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3;
- (id)deviceManagementItems;
- (id)deviceManagementName;
- (id)init;
- (id)deviceList;
- (void)stopListeningForDevices;
- (void)startListeningForDevices;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRMobileDeviceDownloadedSymbolsWatcher : NSObject
{
    BOOL _listeningForSymbols;
}

+ (id)_sharedWatcher;
+ (void)endWatchingForSymbolDownloads;
+ (void)beginWatchingForSymbolDownloads;
@property BOOL listeningForSymbols; // @synthesize listeningForSymbols=_listeningForSymbols;
- (void)_symbolsProcessed:(id)arg1;
- (void)_stopListeningForSymbolsToProcess;
- (void)_listenForSymbolsToProcess;
- (id)init;

@end

@interface XRMobileDevice : XRRemoteDevice
{
    CDStruct_fe0e0a34 _wiredDevice;
    CDStruct_fe0e0a34 _wirelessDevice;
    NSObject<OS_dispatch_queue> *_deviceAccessQueue;
    NSString *_wirelessServiceName;
    BOOL _deviceIsUnactivated;
    BOOL _isAncientDevice;
    BOOL _appleInternalExists;
    BOOL _preferWireless;
    int _developerMode;
    NSString *_amCompanionDeviceIdentifier;
    BOOL _hasTimeDifference;
    double _mobileDeviceTimeDifference;
    int _interfaceCount;
    DTXChannel *_wirelessControlChannel;
}

@property(retain) DTXChannel *wirelessControlChannel; // @synthesize wirelessControlChannel=_wirelessControlChannel;
@property(copy, nonatomic) NSString *wirelessServiceName; // @synthesize wirelessServiceName=_wirelessServiceName;
@property(copy) NSString *companionDeviceIdentifier; // @synthesize companionDeviceIdentifier=_amCompanionDeviceIdentifier;
@property(nonatomic) BOOL preferWireless; // @synthesize preferWireless=_preferWireless;
- (void).cxx_destruct;
- (void)unpairFromCompanion:(id)arg1;
- (void)pairWithCompanion:(id)arg1;
- (id)externalSDKPath;
- (id)internalSDKPath;
- (id)baseSymbolsPath;
- (void)fixupSymbolicator:(struct _CSTypeRef)arg1;
- (void)downloadSymbols;
- (BOOL)mountDeveloperDiskImage:(struct _AMDevice *)arg1;
- (id)ddiImagePath;
- (BOOL)isAppleInternal;
- (BOOL)isAncientDevice;
- (BOOL)isUnactivatedDevice;
- (BOOL)isDevelopmentDevice;
- (void)teardownConnection;
- (void)prepareConnection:(id)arg1;
- (BOOL)isOnLine;
- (BOOL)updateInstalledExecutables;
- (id)makeConnection;
- (void)alternateAction;
- (id)alternateText;
- (id)_legacyWirelessDeviceName;
- (BOOL)_legacyWirelessEnabled;
- (BOOL)_supportsLegacyWireless;
- (void)interfaceDropped:(int)arg1;
- (void)disconnect;
- (struct _AMDServiceConnection *)_createNotificationService:(struct _AMDevice *)arg1;
- (BOOL)_reloadDeviceInformation:(struct _AMDevice *)arg1;
- (void)refreshDeviceInformation;
- (void)xcodeWasTerminated:(unsigned int)arg1;
- (void)xcodeWasLaunched:(unsigned int)arg1;
- (void)symbolsDownloadedAtPath:(id)arg1;
- (void)checkForSymbols;
- (BOOL)_checkForInfoPlistFileAtPath:(id)arg1;
- (BOOL)_checkForSymbolFileLocksAtPath:(id)arg1;
- (id)initWithDevice:(struct _AMDevice *)arg1;
- (int)adoptAMDevice:(struct _AMDevice *)arg1;
- (void)_shutdownDevicePair:(CDStruct_fe0e0a34 *)arg1;
- (id)initWithIdentifier:(id)arg1;
- (void)_devicePairForType:(int)arg1 block:(CDUnknownBlockType)arg2;

@end

@interface XRWirelessDevice : XRMobileDevice <XRWirelessDeviceAuthorizedAPI>
{
    NSURL *_address;
    NSString *_proxyDeviceIdentifier;
    NSString *_passphrase;
}

- (void).cxx_destruct;
- (void)alternateAction;
- (id)alternateText;
- (id)challenge:(id)arg1;
- (id)makeConnection;
- (void)prepareConnection:(id)arg1;
- (void)teardownConnection;
- (BOOL)isOnLine;
- (id)previousExecutables;
- (void)dealloc;
- (void)resetAddress:(id)arg1;
- (BOOL)isAncientDevice;
- (BOOL)isDevelopmentDevice;
- (id)initWithAddress:(id)arg1 identifier:(id)arg2 forProxy:(id)arg3 passphrase:(id)arg4 deviceName:(id)arg5 deviceDescription:(id)arg6 deviceVersion:(id)arg7 productVersion:(id)arg8 productType:(id)arg9 deviceSmallRepresentation:(id)arg10;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end


#endif /* XRMobileDeviceDiscoveryPlugIn_xrplugin_h */
