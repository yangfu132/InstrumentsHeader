//
//  SamplerPlugin.xrplugin.h
//  MacDemo
//
//  Created by szzc on 2016/11/25.
//  Copyright © 2016年 szzc. All rights reserved.
//

#ifndef SamplerPlugin_xrplugin_h
#define SamplerPlugin_xrplugin_h
//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CountersACColumns {
    unsigned char time;
    unsigned char thread;
    unsigned char coreIndex;
    unsigned char threadState;
    unsigned char kernelCallstack;
    unsigned char userCallstack;
    unsigned char countersArray;
};

struct NSString {
    Class _field1;
};

struct XRTimeRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _CSTypeRef {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _XRDeviceTimeInfo {
    unsigned long long bootEpoch;
    unsigned long long mach_absolute_start;
    struct mach_timebase_info mach_time_base;
};

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct mach_timebase_info {
    unsigned int numer;
    unsigned int denom;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__first_;
    } __end_cap_;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/PlugIns/SamplerPlugin.xrplugin/Contents/MacOS/SamplerPlugin
// UUID: 12424C86-1530-3E4D-89A5-FFD189355FBA
//
//                           Arch: x86_64
//                 Source version: 61529.0.0.0.0
//       Minimum Mac OS X version: 10.10.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../../Frameworks
//                               = /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks
//                       Run path: @loader_path/../../../../../../../../SharedFrameworks
//                               = /Applications/Xcode.app/SharedFrameworks
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (NSArray *)tableView:(NSTableView *)arg1 rowActionsForRow:(long long)arg2 edge:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol SymbolAwareRun <NSObject>
- (XRBacktraceRepository *)backtraceRepository;
@end

@protocol XRCallTreeComparable <NSObject>
- (BOOL)prepareCallTreeCompare;
@end

@protocol XRCallTreeDataSource <NSObject>
- (XRBacktraceAggregator *)backtracesForCategory:(NSString *)arg1 timeRange:(struct XRTimeRange)arg2 savedIndex:(unsigned long long *)arg3;

@optional
- (void)resetAggregatesForRepository:(XRBacktraceRepository *)arg1;
- (NSArray *)processCategoriesForPid:(int)arg1;
- (NSArray *)provideCategories;
@end

@protocol XRExportDataProtocol
- (void)exportSelectedRunInFormat:(int)arg1 toPath:(NSString *)arg2;
@end

@protocol XRFilteredDataSource <NSObject>

@optional
- (NSString *)selectedSearchContext;
- (NSArray *)searchContexts;
- (void)filterDetailWithTokens:(NSArray *)arg1 context:(NSString *)arg2 matchesAny:(BOOL)arg3;
@end

@protocol XRImportDataProtocol
- (BOOL)importRun:(XRRun *)arg1 fromPaths:(NSArray *)arg2 error:(id *)arg3;
@end

@protocol XRSourceQuery
- (NSArray *)operation:(NSOperation *)arg1 commentsForSymbol:(id <CommonSymbol>)arg2 inSourceManager:(XRCodeManager *)arg3 callTreeInformation:(XRCallTreeInformation *)arg4;

@optional
- (NSArray *)operation:(NSOperation *)arg1 commentsForSymbol:(id <CommonSymbol>)arg2 forProcess:(int)arg3 inSourceManager:(XRCodeManager *)arg4 callTreeInformation:(XRCallTreeInformation *)arg5;
- (NSNumber *)sourceQueriesMustRunOnMainThread;
@end

@protocol XRSymbolSelectionOwner
- (void)saveSymbolSelection;
- (void)restoreSymbolSelection;
@end

@protocol XRThreadStrategyDataSource <NSObject>
- (NSArray *)threadsParticipatingInRun:(XRRun *)arg1;
@end

@protocol __ARCLiteIndexedSubscripting__
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
@end

@protocol __ARCLiteKeyedSubscripting__
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
@end

@interface XRSamplerInstrumentDecoratorCPUUsage : DTTimelineDecorator
{
    XRSamplerRun *_run;
    unsigned long long _drawingIntervalWidth;
    unsigned long long _sampleWeight;
    XRThread *_thread;
    XRCore *_core;
}

- (void).cxx_destruct;
- (id)decorateInspectionRanges:(id)arg1;
- (id)decorateContainer:(struct DTTimelineDecorationContainer *)arg1;
- (void)setDefaultsForPlane:(id)arg1;
- (id)initWithRun:(id)arg1 intervalWidth:(unsigned long long)arg2 sampleWeight:(unsigned long long)arg3 thread:(id)arg4 core:(id)arg5;
- (id)init;

@end

@interface XRSamplerInstrumentDecoratorBars : DTTimelineDecorator
{
    XRSamplerRun *_run;
    unsigned long long _graphIndex;
    unsigned long long _eventOrFormulaIndex;
    unsigned long long _eventIndex;
    unsigned long long _barWidth;
    unsigned long long _sampleWeight;
    XRThread *_thread;
    XRCore *_core;
    BOOL _isFormula;
    BOOL _isPMI;
}

- (void).cxx_destruct;
- (id)decorateInspectionRanges:(id)arg1;
- (id)decorateContainer:(struct DTTimelineDecorationContainer *)arg1;
- (void)setDefaultsForPlane:(id)arg1;
- (id)initWithRun:(id)arg1 graphIndex:(unsigned long long)arg2 barWidth:(unsigned long long)arg3 sampleWeight:(unsigned long long)arg4 thread:(id)arg5 core:(id)arg6;
- (id)init;

@end

@interface XRSamplerInstrumentDecoratorBacktraceSamples : DTTimelineDecorator
{
    XRSamplerRun *_run;
    XRThread *_thread;
}

- (void).cxx_destruct;
- (id)decorateContainer:(struct DTTimelineDecorationContainer *)arg1;
- (void)setDefaultsForPlane:(id)arg1;
- (id)initWithRun:(id)arg1 thread:(id)arg2;

@end

@interface XRSamplerEvent : XRManagedEvent
{
    unsigned long long _timestamp;
    unsigned long long _tid;
    id <CommonRawStack> _backtrace;
    unsigned int _cpu;
    unsigned int _threadState;
    unsigned long long _runningTime;
}

+ (void)configureDescriptor:(id)arg1 forStorageManager:(id)arg2;
+ (void)_setBlockForLegacyDecoding:(CDUnknownBlockType)arg1;
@property(readonly) id <CommonRawStack> backtrace; // @synthesize backtrace=_backtrace;
@property(readonly) unsigned int cpuIndex; // @synthesize cpuIndex=_cpu;
@property(readonly) unsigned long long tid; // @synthesize tid=_tid;
@property(readonly) unsigned long long timestamp; // @synthesize timestamp=_timestamp;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@property(readonly) unsigned int stackDepth;
@property(readonly) unsigned long long runningTime;

@end

@interface XRThreadSampleEvent : NSObject
{
    unsigned int cpuIndex;
    unsigned int thread;
    XRRawBacktrace *backtrace;
    unsigned long long runningTime;
}

- (void).cxx_destruct;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface XRSamplerPMIEvent : XRSamplerEvent
{
}

+ (void)configureDescriptor:(id)arg1 forStorageManager:(id)arg2;
- (unsigned long long)runningTime;

@end

@interface XRSpinSession : NSObject <NSCoding>
{
    unsigned long long _startTime;
    unsigned long long _endTime;
    XRBacktraceRepository *_repository;
    NSDate *_absStart;
    int _pid;
}

+ (void)initialize;
@property(readonly) XRBacktraceRepository *repository; // @synthesize repository=_repository;
@property(nonatomic) unsigned long long endTime; // @synthesize endTime=_endTime;
@property(readonly) int pid; // @synthesize pid=_pid;
- (void).cxx_destruct;
@property(readonly) struct XRTimeRange timeRange;
@property(readonly) NSString *uniqueName;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithPid:(int)arg1 startDate:(id)arg2 runStartTime:(unsigned long long)arg3 repository:(id)arg4;

@end

@interface _XRSamplerOldTraceData : NSObject
{
    unsigned int _cpu;
    unsigned long long _ts;
    unsigned long long _tid;
    id <CommonRawStack> _bt;
    unsigned long long _running;
}

@property(nonatomic) unsigned long long running; // @synthesize running=_running;
@property(nonatomic) unsigned int cpu; // @synthesize cpu=_cpu;
@property(retain, nonatomic) id <CommonRawStack> bt; // @synthesize bt=_bt;
@property(nonatomic) unsigned long long tid; // @synthesize tid=_tid;
@property(nonatomic) unsigned long long ts; // @synthesize ts=_ts;
- (void).cxx_destruct;
- (id)initWithTs:(unsigned long long)arg1 tid:(unsigned long long)arg2 bt:(id)arg3 cpu:(unsigned int)arg4 running:(unsigned long long)arg5;

@end

@interface XRSamplerRun : XRRun <SymbolAwareRun, XRSourceQuery, XRCallTreeDataSource>
{
    XRStorageManager *_storageManager;
    XRBacktraceRepository *_backtraceRepository;
    int _numberProcessors;
    int _options;
    int _samplerMode;
    unsigned long long _sampleRateMicroseconds;
    NSString *_pmiEventMnemonic;
    NSString *_pmiCounterName;
    unsigned long long _pmiEventThreshold;
    int _target;
    NSMutableDictionary *_threadsByTid;
    unsigned int _displayedEvent;
    unsigned int _maxStackDepth;
    NSMutableArray *_spinSessions;
    XRSamplerDataReceiver *_dataReceiver;
    unsigned int _nextThreadDiscoveryIndex;
    NSDate *_startDate;
}

+ (void)initialize;
@property(readonly) unsigned int maxStackDepth; // @synthesize maxStackDepth=_maxStackDepth;
@property(nonatomic) unsigned int displayedEvent; // @synthesize displayedEvent=_displayedEvent;
@property(readonly) XRStorageManager *storageManager; // @synthesize storageManager=_storageManager;
@property(readonly) int allowedTarget; // @synthesize allowedTarget=_target;
@property(readonly) int samplerOptions; // @synthesize samplerOptions=_options;
@property(readonly) int numberOfProcessors; // @synthesize numberOfProcessors=_numberProcessors;
@property(nonatomic) unsigned long long pmiEventThreshold; // @synthesize pmiEventThreshold=_pmiEventThreshold;
@property(retain, nonatomic) NSString *pmiCounterName; // @synthesize pmiCounterName=_pmiCounterName;
@property(retain, nonatomic) NSString *pmiEventMnemonic; // @synthesize pmiEventMnemonic=_pmiEventMnemonic;
@property(nonatomic) int samplerMode; // @synthesize samplerMode=_samplerMode;
@property(nonatomic) unsigned long long sampleRate; // @synthesize sampleRate=_sampleRateMicroseconds;
- (void).cxx_destruct;
- (id)provideCursorForNavigator:(id)arg1;
- (BOOL)canProvideCursorForNavigator:(id)arg1;
- (void)voteForEpoch:(id)arg1;
- (id)operation:(id)arg1 commentsForSymbol:(id)arg2 forProcess:(int)arg3 inSourceManager:(id)arg4 callTreeInformation:(id)arg5;
- (id)operation:(id)arg1 commentsForSymbol:(id)arg2 inSourceManager:(id)arg3 callTreeInformation:(id)arg4;
- (BOOL)loadCoreProfileSampleDataFromFileWithPath:(id)arg1;
- (BOOL)loadDTPerformanceSessionDataFromPaths:(id)arg1 error:(id *)arg2;
- (BOOL)loadSampleDataFromPaths:(id)arg1 withMode:(int)arg2 error:(id *)arg3;
- (id)additionalSupportedBrushNamesForStrategy:(id)arg1;
- (id)backtracesForCategory:(id)arg1 timeRange:(struct XRTimeRange)arg2 savedIndex:(unsigned long long *)arg3;
- (id)processCategoriesForPid:(int)arg1;
- (id)backtraceRepository;
- (void)resymbolicationDidComplete;
- (void)enumerateEventsInRange:(struct XRTimeRange)arg1 withBlock:(CDUnknownBlockType)arg2;
- (id)eventForIdentifier:(unsigned int)arg1;
- (unsigned int)latestEventIdentifierBeforeTimestamp:(unsigned long long)arg1;
- (unsigned int)closestEventIdentifierAfterTimestamp:(unsigned long long)arg1;
- (id)processNameForPid:(int)arg1;
@property(readonly) NSArray *allThreads;
- (id)threadForEvent:(id)arg1;
@property(readonly) unsigned long long lastTimestamp;
- (unsigned long long)_currentTimestamp;
- (void)discoverNewThreads;
- (void)pauseRecording:(BOOL)arg1;
- (BOOL)stopRecordingWithPid:(int)arg1;
- (BOOL)startRecordingWithPid:(int)arg1;
- (void)suspendDataCollection:(double)arg1;
- (void)setStart:(double)arg1;
- (void)_prepareForDevice:(id)arg1 options:(int)arg2 pid:(int)arg3 receiverClass:(Class)arg4;
- (void)prepareForDevice:(id)arg1 options:(int)arg2 pid:(int)arg3;
- (unsigned long long)weightCount;
- (BOOL)recordUserStacks;
- (BOOL)recordKernelStacks;
- (id)initWithCoder:(id)arg1;
- (id)_storagePathForVersion:(long long)arg1;
- (unsigned long long)numberOfGraphs;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRSamplerInstrument : XRLegacyInstrument <XRImportDataProtocol, XRFilteredDataSource, XRThreadStrategyDataSource, NSTableViewDataSource, NSTableViewDelegate, XRSymbolSelectionOwner, XRExportDataProtocol, XRCallTreeComparable>
{
    XRCallTreeDetailView *_callTreeView;
    PFTTableDetailView *_sampleListView;
    NSScrollView *_enclosingScrollView;
    XRManagedEventArrayController *_listController;
    int _options;
    int _mode;
    int _targetPid;
    unsigned long long _trackUpdateTimestamp;
    unsigned long long _sampleRateMicroseconds;
    unsigned long long _eventCount;
    unsigned long long _eventNameSelection;
    unsigned long long _activeDetailViewType;
    NSString *_sampleUnit;
    NSDictionary *_restoredPrefs;
    BOOL _showRunningTimes;
    BOOL _ignoreInspectionChanges;
    BOOL _any;
    NSArray *_tokens;
    DTKPCPUEvent *_pmiEvent;
    unsigned long long _pmiEventThreshold;
    BOOL _userHasIgnoredWarning;
    NSString *_delayedPmiEventMnemonic;
    NSNumber *_delayedPmiEventThreshold;
    NSDictionary *_delayedPMCSettings;
    NSArray *_counterAllocations;
}

@property(retain, nonatomic) NSArray *counterAllocations; // @synthesize counterAllocations=_counterAllocations;
@property(copy, nonatomic) NSString *samplingUnit; // @synthesize samplingUnit=_sampleUnit;
- (void).cxx_destruct;
- (id)threadsParticipatingInRun:(id)arg1;
- (id)threadStrategyDataSource;
- (long long)nextHighlightedRowForTable:(id)arg1 currentRow:(long long)arg2;
- (long long)previousHighlightedRowForTable:(id)arg1 currentRow:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)tableView:(id)arg1 isRowHighlighted:(unsigned long long)arg2;
- (BOOL)_isEventActive:(id)arg1;
- (BOOL)prepareCallTreeCompare;
- (id)dataMiningMenu;
- (BOOL)supportsDataMining;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)tick:(id)arg1;
- (BOOL)requiresTickNotification;
- (id)currentDetailView;
- (void)_updateExtendedDetailViewContext:(id)arg1;
- (void)addEventFieldFiltersToController:(id)arg1 forToken:(id)arg2;
- (void)_filterEventsArrayWithTokens:(id)arg1 context:(id)arg2 matchesAny:(BOOL)arg3;
- (void)filterDetailWithTokens:(id)arg1 context:(id)arg2 matchesAny:(BOOL)arg3;
- (void)_strategyDidChange:(id)arg1;
- (id)selectedSearchContext;
- (id)searchContexts;
- (void)setSelectedTimeRange:(struct XRTimeRange)arg1;
- (void)_refreshRangeFilter;
- (BOOL)setSelectedRunIndex:(unsigned long long)arg1;
- (id)viewForContext:(id)arg1;
- (id)contextRepresentation;
- (void)showSampleList;
- (void)setInspectedEventIdentifier:(unsigned int)arg1;
- (void)displayEventIdentifier:(unsigned int)arg1;
- (void)setInspectionTime:(unsigned long long)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (void)updateCurrentDetailView;
- (void)saveSymbolSelection;
- (void)restoreSymbolSelection;
- (void)spinEnded:(id)arg1;
- (void)spinDetected:(id)arg1;
- (BOOL)importRun:(id)arg1 fromPaths:(id)arg2 error:(id *)arg3;
- (void)exportSelectedRunInFormat:(int)arg1 toPath:(id)arg2;
- (int)minimumAuthorizationRequirement;
- (void)downloadDSYM:(id)arg1;
- (void)symbolicateAddress:(id)arg1;
- (void)locateAndSymbolicateAddress:(id)arg1;
- (id)menuForDetailViewRow:(id)arg1 andColumn:(id)arg2;
- (void)_dumpCSInfoToConsole:(id)arg1;
- (id)_enclosingScrollView;
- (id)_sampleListView;
- (id)callTreeView;
- (id)samplerDataElementsForContext:(id)arg1;
- (id)dataElementsForContext:(id)arg1;
- (void)addColumnsToDetailView:(id)arg1;
- (void)addColumnsToCallTreeDetailView:(id)arg1;
- (void)setDetailViewType:(unsigned long long)arg1;
- (unsigned long long)detailViewType;
- (id)detailViewLabelForType:(unsigned long long)arg1;
- (unsigned long long)detailViewTypeMask;
- (void)setRecordingEnabled:(BOOL)arg1;
- (void)suspendDataCollection;
- (void)endCommand:(id)arg1;
- (void)stopRecording;
- (void)startRecording;
- (void)prepareToRecord;
- (void)_prepareCurrentRunToRecord;
- (BOOL)verifyEnvironment:(id)arg1 arguments:(id)arg2 instruments:(id)arg3 error:(id *)arg4;
- (BOOL)hasCustomStateDisplayDescription;
- (id)stateDisplayDescription;
- (void)warnUserOfDangerousStates;
- (id)reasonForNotSupportingDevice:(id)arg1;
- (unsigned long long)defaultDetailViewType;
- (void)awakeFromTemplate;
@property(copy, nonatomic) NSDictionary *configurationOptions;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (BOOL)resolution:(unsigned long long)arg1 differsFrom:(unsigned long long)arg2 runNumber:(long long)arg3 strategy:(struct NSString *)arg4;
- (void)configureTrack:(id)arg1;
- (id)_fixupLoadedBrushName:(id)arg1;
- (int)stackCollectionType;
- (void)setStackCollectionType:(int)arg1;
@property(nonatomic) BOOL timeProfilingAllThreadStates;
- (void)_validateTimeProfilerState;
- (int)showRunningOnly;
- (void)setShowRunningOnly:(int)arg1;
@property(retain, nonatomic) DTKPCPUEvent *pmiEvent;
@property(retain, nonatomic) id pmiEventThreshold;
- (void)setSampleRate:(id)arg1;
- (id)sampleRate;
- (void)setTargetPid:(int)arg1;
- (void)setMode:(int)arg1;
- (BOOL)needsKTraceToRecord;
- (void)invalidate;
- (void)dealloc;
- (id)initWithExtension:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRCoreProfileDataReceiver : XRSamplerDataReceiver
{
    const struct _XRDeviceTimeInfo *_timeInfo;
    XRIntKeyedDictionary *_threadBTCache;
    BOOL _missingEntryWarning;
    BOOL _pidCaching;
    unsigned long long _runDurationInNS;
    DTKTraceTapConfig *_snapshottedConfig;
}

+ (unsigned int)_fixAndReturnCPCallstackFrames:(unsigned long long *)arg1 withLength:(unsigned int)arg2 extraRegisters:(unsigned int)arg3 isKernelStack:(BOOL)arg4 symbolicator:(struct _CSTypeRef)arg5;
+ (void)fixupBacktrace:(id)arg1 withSymbolProvider:(id)arg2 nonLeafAdjustment:(int)arg3 extraUserRegisters:(unsigned int)arg4 extraKernelRegisters:(unsigned int)arg5;
+ (id)backtraceForRecord:(id)arg1 repository:(id)arg2 pid:(int)arg3 uniquingTable:(id)arg4;
+ (BOOL)canActAsRemoteProxyOnDevice:(id)arg1;
+ (id)descriptorIdentifier;
+ (void)initialize;
- (void).cxx_destruct;
- (void)voteForEpoch:(id)arg1;
- (void)_processRecord:(id)arg1;
- (id)errorString;
- (void)stopRecordingPid:(int)arg1;
- (void)willEndAtTimeInterval:(id)arg1;
- (void)resnapDeviceTimeInfo;
- (BOOL)recordPid:(int)arg1;
- (id)triggerConfigs:(int)arg1;
- (const struct _XRDeviceTimeInfo *)runTimeInfo;
- (id)initWithRun:(id)arg1 device:(id)arg2 startDate:(id)arg3 sampleRate:(unsigned long long)arg4 updateRate:(unsigned long long)arg5 options:(int)arg6 pmiEventMnemonic:(id)arg7 pmiEventThreshold:(unsigned long long)arg8 pmiCounterName:(id)arg9;
- (id)tap;

@end

@interface samplerThreadInfo : NSObject
{
    unsigned long long _uniqueIdentifier;
    unsigned long long _lastThreadTime;
    id <CommonRawStack> _lastBacktrace;
}

@property(retain, nonatomic) id <CommonRawStack> lastBacktrace; // @synthesize lastBacktrace=_lastBacktrace;
@property(nonatomic) unsigned long long lastThreadTime; // @synthesize lastThreadTime=_lastThreadTime;
@property(nonatomic) unsigned long long uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
- (void).cxx_destruct;

@end

@interface XRSamplerDataReceiver : NSObject
{
    XRStorageManager *_storage;
    XRBacktraceRepository *_repository;
    XRDevice *_device;
    XRSamplerRun *_run;
    NSDate *_startDate;
    UniquingTable *_uniquer;
    unsigned long long _sampleRate;
    unsigned long long _updateRate;
    NSObject<OS_dispatch_queue> *_workQueue;
    int _options;
    void *_queuedEvents;
    unsigned int _queuedSize;
    unsigned int _queuedCount;
    unsigned long long _markTimestamp;
    unsigned long long _latestTimestamp;
    NSMutableIndexSet *_validRecordingPids;
    BOOL _stopRecording;
    BOOL _skipRecording;
    NSString *_pmiEventMnemonic;
    NSString *_pmiCounterName;
    unsigned long long _pmiEventThreshold;
    unsigned int _timestampHandle;
    unsigned int _tidHandle;
    unsigned int _backtraceHandle;
    unsigned int _backtraceIDHandle;
    unsigned int _runningTimeHandle;
    unsigned int _cpuHandle;
    unsigned int _threadStateHandle;
    BOOL _isPMIMode;
    unsigned long long *_lastUpdatePerCore;
}

+ (id)descriptorIdentifier;
- (void).cxx_destruct;
- (id)errorString;
- (void)voteForEpoch:(id)arg1;
- (void)markAndFlushQueue;
- (void)queueEventWithTimestamp:(unsigned long long)arg1 thread:(unsigned long long)arg2 backtrace:(unsigned int)arg3 cpu:(unsigned int)arg4 threadState:(unsigned int)arg5;
- (unsigned long long)calculateCoreDelta:(unsigned long long)arg1 cpu:(unsigned int)arg2;
- (void)_takeSampleOfTask:(unsigned int)arg1 pid:(int)arg2 samplingContext:(struct sampling_context_t *)arg3 threadInfo:(struct __CFDictionary *)arg4;
- (void)setRecordingPaused:(BOOL)arg1;
- (void)stopRecordingPid:(int)arg1;
- (BOOL)recordPid:(int)arg1;
- (void)dealloc;
- (id)initWithRun:(id)arg1 device:(id)arg2 startDate:(id)arg3 sampleRate:(unsigned long long)arg4 updateRate:(unsigned long long)arg5 options:(int)arg6 pmiEventMnemonic:(id)arg7 pmiEventThreshold:(unsigned long long)arg8 pmiCounterName:(id)arg9;

@end

@interface XRRemoteSamplerDataReceiver : XRSamplerDataReceiver
{
    DTXChannel *_channel;
    unsigned long long _serviceVersion;
    unsigned long long _remoteReferenceTime;
    int _targetPid;
}

+ (id)channelForDevice:(id)arg1 version:(unsigned long long *)arg2;
- (void).cxx_destruct;
- (void)_dispatchStopCollection;
- (void)_dispatchStartCollection;
- (void)configureChannelForCollection:(id)arg1;
- (void)processMessage:(id)arg1;
- (void)stopRecordingPid:(int)arg1;
- (BOOL)recordPid:(int)arg1;
- (void)dealloc;
- (void)handleMessage:(id)arg1;
- (id)initWithRun:(id)arg1 device:(id)arg2 startDate:(id)arg3 sampleRate:(unsigned long long)arg4 updateRate:(unsigned long long)arg5 options:(int)arg6 pmiEventMnemonic:(id)arg7 pmiEventThreshold:(unsigned long long)arg8 pmiCounterName:(id)arg9;

@end

@interface XRSamplerInspectionCursor : XRStrategyInspectionCursor
{
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _arrangedIdentifiers;
    struct __wrap_iter<unsigned int *> {
        unsigned int *__i;
    } _position;
    XRSamplerRun *_run;
}

+ (id)cursorSatisfyingNavigator:(id)arg1 run:(id)arg2;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_moveBackward;
- (void)_moveForward;
- (BOOL)_canMoveBackward;
- (BOOL)_canMoveForward;
- (BOOL)_populateInspectionDataElements:(id)arg1;

@end

@interface XRRemoteCoreProfileDataReceiver : XRRemoteSamplerDataReceiver
{
    unsigned int _fieldCount;
    BOOL _includesCPUAndRegCount;
    BOOL _kernelStacks;
    BOOL _userStacks;
}

+ (id)channelForDevice:(id)arg1 version:(unsigned long long *)arg2;
+ (id)descriptorIdentifier;
- (void)configureChannelForCollection:(id)arg1;
- (void)processMessage:(id)arg1;
- (BOOL)recordPid:(int)arg1;

@end

@interface XRPlaybackCoreProfileDataReceiver : XRCoreProfileDataReceiver
{
    struct _XRDeviceTimeInfo _recordedTimeInfo;
    DTTap *_playbackTap;
    DTXConnection *_playbackConnection;
    NSArray *_triggerConfigs;
}

@property(retain, nonatomic) NSArray *triggerConfigs; // @synthesize triggerConfigs=_triggerConfigs;
- (void).cxx_destruct;
- (id)tap;
- (BOOL)recordPid:(int)arg1;
- (id)triggerConfigs:(int)arg1;
- (const struct _XRDeviceTimeInfo *)runTimeInfo;
- (void)prepareForTapWithPlaybackConnection:(id)arg1 timeInfo:(const struct _XRDeviceTimeInfo *)arg2;

@end

@interface XRPerformanceSessionSamplerImporter : XRRemoteCoreProfileDataReceiver
{
}

- (void)setReferenceTime:(unsigned long long)arg1;
- (void)setServiceVersion:(unsigned long long)arg1;

@end

@interface XRSamplerTextImporter : XRSamplerDataReceiver
{
}

- (BOOL)importFile:(id)arg1;

@end

@interface XRICPImporter : XRCoreProfileDataReceiver
{
}

- (BOOL)importFromFileStream:(struct __sFILE *)arg1 version:(unsigned long long)arg2 timestampOffset:(unsigned long long)arg3;

@end

@interface XRCountersEvent : XRSamplerEvent
{
    unsigned long long _eventsAndFormulasCount;
    unsigned long long *_counterValues;
}

+ (void)configureDescriptor:(id)arg1 forStorageManager:(id)arg2;
@property(readonly) double *counterValuesAsDouble;
@property(readonly) unsigned long long *counterValues;
- (void)dealloc;

@end

@interface XREventDecimalFormatter : NSFormatter
{
    unsigned long long _index;
    NSNumberFormatter *_singlePrecisionFormatter;
}

- (void).cxx_destruct;
- (id)stringForObjectValue:(id)arg1;
- (id)initWithIndex:(unsigned long long)arg1;

@end

@interface XREvaluatedFormulaFormatter : NSFormatter
{
    XRFormulaEvaluator *_formula;
    NSNumberFormatter *_singlePrecisionFormatter;
    unsigned long long _weightCount;
    double *_values;
}

- (void).cxx_destruct;
- (void)dealloc;
- (id)stringForObjectValue:(id)arg1;
- (id)initWithFormula:(id)arg1 weightCount:(unsigned long long)arg2;

@end

@interface XRCountersInstrument : XRSamplerInstrument
{
    XRCountersSetupModel *_countersSetupModel;
    NSMutableArray *_sampleListCounterColumns;
    NSMutableArray *_callTreeCounterColumns;
    unsigned int _tapGroup;
    XRAnalysisCoreTableSpec *_tableSpec;
}

- (void).cxx_destruct;
- (void)tick:(id)arg1;
- (BOOL)requiresTickNotification;
- (void)startRecording;
- (void)addColumnsToDetailView:(id)arg1;
- (void)addColumnsToCallTreeDetailView:(id)arg1;
- (void)_addSampleCounterColumns:(id)arg1;
- (void)_removeSampleCounterColumns;
- (void)_addCalltreeCounterColumns:(id)arg1;
- (void)_removeCalltreeCounterColumns;
- (BOOL)setSelectedRunIndex:(unsigned long long)arg1;
- (void)_prepareCurrentRunToRecord;
- (unsigned long long)_sampleRateMicroseconds;
- (BOOL)verifyEnvironment:(id)arg1 arguments:(id)arg2 instruments:(id)arg3 error:(id *)arg4;
- (void)overrideDynamicTableRequirementsForNextRun:(id)arg1 withAdditionalSchemas:(id)arg2;
- (id)reasonForNotSupportingDevice:(id)arg1;
- (id)samplerDataElementsForContext:(id)arg1;
- (void)setConfigurationOptions:(id)arg1;
- (id)configurationOptions;
- (void)configureTrack:(id)arg1;
- (int)targetPID;
- (id)countersSetupModel;
- (int)minimumAuthorizationRequirement;
- (BOOL)needsKTraceToRecord;
- (void)invalidate;
- (id)initWithExtension:(id)arg1;

@end

@interface XRCountersRun : XRSamplerRun
{
    unsigned long long _updateRate;
    BOOL _pidCaching;
    BOOL _missingEntryWarning;
    NSObject<OS_dispatch_queue> *_workQueue;
    UniquingTable *_uniquer;
    void *_queuedEvents;
    unsigned int _queuedSize;
    unsigned int _queuedCount;
    unsigned long long _markTimestamp;
    unsigned long long _latestTimestamp;
    NSMutableArray *_events;
    NSMutableArray *_formulas;
    NSMutableArray *_formulaEvaluators;
    NSMutableArray *_eventsAndFormulas;
    NSMutableArray *_eventsThenFormulas;
    unsigned long long _numberOfEventAndFormulaGraphsCached;
    unsigned long long *_graphIndexRemapping;
    unsigned int _timestampHandle;
    unsigned int _tidHandle;
    unsigned int _backtraceHandle;
    unsigned int _backtraceIDHandle;
    unsigned int _runningTimeHandle;
    unsigned int _cpuHandle;
    unsigned int _threadStateHandle;
    unsigned int _counterValuesHandle;
    unsigned int _tableID;
    XRAnalysisCore *_core;
    unsigned long long _lastTimestamp;
    struct CountersACColumns _columns;
}

+ (void)initialize;
@property(nonatomic) unsigned long long updateRate; // @synthesize updateRate=_updateRate;
- (void).cxx_destruct;
- (id)eventDescriptorForIdentifier:(id)arg1;
- (BOOL)loadDTPerformanceSessionDataFromPaths:(id)arg1 error:(id *)arg2;
- (unsigned long long)eventIndexForEventOrFormulaIndex:(unsigned long long)arg1;
- (double)evaluateFormulaAtIndex:(unsigned long long)arg1 withEventArray:(double *)arg2 arrayCount:(unsigned long long)arg3;
- (BOOL)isFormulaAtEventOrFormulaIndex:(unsigned long long)arg1;
- (unsigned long long)eventOrFormulaIndexForDisplayedIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfGraphs;
@property(readonly, nonatomic) unsigned long long formulasCount;
@property(readonly, nonatomic) unsigned long long eventsCount;
@property(readonly, nonatomic) unsigned long long eventsAndFormulasCount;
- (id)formulaEvaluatorAtIndex:(unsigned int)arg1;
- (id)eventsAndFormulas;
- (void)setCountersFromModel:(id)arg1;
- (void)processRecord:(id)arg1;
- (void)stopWatchingTable;
- (void)watchTableID:(unsigned int)arg1 core:(id)arg2 tableSpec:(id)arg3;
- (void)tick;
- (id)_createRecordFromCursor:(struct XRAnalysisCoreReadCursor *)arg1 callstackSpace:(unsigned long long *)arg2;
- (void)prepareForDevice:(id)arg1 options:(int)arg2 pid:(int)arg3;
- (id)backtracesForCategory:(id)arg1 timeRange:(struct XRTimeRange)arg2 savedIndex:(unsigned long long *)arg3;
- (id)backtraceRepository;
- (unsigned long long)weightCount;
- (unsigned long long)_currentTimestamp;
- (BOOL)stopRecordingWithPid:(int)arg1;
- (BOOL)startRecordingWithPid:(int)arg1;
- (id)workQueue;
- (id)initWithCoder:(id)arg1;
- (id)_storagePathForVersion:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;

@end

@interface NSAttributedString (_AttribStringCompare)
- (long long)localizedStandardCompare:(id)arg1;
@end

#endif /* SamplerPlugin_xrplugin_h */
