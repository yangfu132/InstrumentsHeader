//
//  XRPowerInstrument.xrplugin.h
//  MacDemo
//
//  Created by szzc on 2016/11/25.
//  Copyright © 2016年 szzc. All rights reserved.
//

#ifndef XRPowerInstrument_xrplugin_h
#define XRPowerInstrument_xrplugin_h

//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct XRMeasurementStreamColumn {
    id _field1;
    id _field2;
    id _field3;
    struct flags _field4;
    struct XRMeasurementStreamColumnLabel *_field5;
    unsigned char _field6;
};

struct XRMeasurementStreamColumnLabel {
    float _field1;
    float _field2;
    id _field3;
};

struct XRPowerTimelineEntry {
    struct XRTimeRange range;
    unsigned long long idx;
    unsigned int recno;
};

struct XRPowerTimelinePrivate {
    struct _TimelineIdxStrat _field1;
    struct XRSpatialIndexAnonymousPagePool _field2;
    struct XRSpatialIndex<XRPowerTimelineEntry, _Enclosure> _field3;
};

struct XRSpatialIndex<XRPowerTimelineEntry, _Enclosure> {
    struct XRSpatialIndexPagePool *_field1;
    struct XRSpatialIndexPageRef _field2;
    struct XRSpatialIndexStrategy<XRPowerTimelineEntry, _Enclosure> *_field3;
};

struct XRSpatialIndexAnonymousPagePool {
    CDUnknownFunctionPointerType *_field1;
    struct vector<void *, std::__1::allocator<void *>> _field2;
    unsigned long long _field3;
};

struct XRSpatialIndexPagePool;

struct XRSpatialIndexPageRef {
    unsigned int :2;
    unsigned int :30;
};

struct XRSpatialIndexStrategy<XRPowerTimelineEntry, _Enclosure>;

struct XRTimeRange {
    unsigned long long start;
    unsigned long long length;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _TimelineIdxStrat {
    CDUnknownFunctionPointerType *_field1;
};

struct flags {
    unsigned int :1;
};

struct vector<void *, std::__1::allocator<void *>> {
    void **_field1;
    void **_field2;
    struct __compressed_pair<void **, std::__1::allocator<void *>> {
        void **_field1;
    } _field3;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/PlugIns/XRPowerInstrument.xrplugin/Contents/MacOS/XRPowerInstrument
// UUID: 7C495EA8-4B95-3FDE-AE57-8D5F3942DF58
//
//                           Arch: x86_64
//                 Source version: 61503.0.0.0.0
//       Minimum Mac OS X version: 10.11.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../../Frameworks
//                               = /Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/Frameworks
//                       Run path: @loader_path/../../../../../../../SharedFrameworks
//                               = /Applications/Xcode.app/Contents/SharedFrameworks
//

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (NSArray *)tableView:(NSTableView *)arg1 rowActionsForRow:(long long)arg2 edge:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol XRDeviceLogImporter <NSObject>
- (void)importSession:(NSDictionary *)arg1 fromDevice:(XRDevice *)arg2 intoTrace:(XRTrace *)arg3;
@end

@protocol XRDeviceLogSupport <NSObject>
- (id <XRDeviceLogImporter>)deviceLogImporter;
@end

@protocol XRImportDataProtocol
- (BOOL)importRun:(XRRun *)arg1 fromPaths:(NSArray *)arg2 error:(id *)arg3;
@end

@protocol XRStreamedPowerParser <NSObject>
- (BOOL)getTimeRange:(struct XRTimeRange *)arg1 andLength:(unsigned long long *)arg2 forStreamOffset:(unsigned long long)arg3 inStream:(NSFileHandle *)arg4;
- (XRPowerDatum *)objectForEntry:(const struct XRPowerTimelineEntry *)arg1 inFile:(NSFileHandle *)arg2;

@optional
- (XRPowerStreamDefinition *)streamDefinition;
- (void)setDefinition:(XRPowerStreamDefinition *)arg1;
@end

@interface XRStreamedPowerInstrument : XRLegacyInstrument <XRImportDataProtocol, XRDeviceLogImporter, XRDeviceLogSupport, NSTableViewDataSource, NSTableViewDelegate>
{
    XRPowerDetailController *_detailController;
    NSMutableDictionary *_eventStreamParsers;
    NSMutableDictionary *_measStreamParsers;
    NSMutableDictionary *_stateStreamParsers;
    NSMutableSet *_streamIDs;
    NSMutableDictionary *_streamIDsByHandle;
    unsigned long long _detailViewType;
    unsigned long long _myLastTickTime;
}

+ (void)initialize;
+ (id)textColorForNoun:(id)arg1 andAdjective:(id)arg2;
+ (id)colorForNoun:(id)arg1 andAdjective:(id)arg2;
- (void).cxx_destruct;
- (void)tick:(id)arg1;
- (BOOL)requiresTickNotification;
- (void)importSession:(id)arg1 fromDevice:(id)arg2 intoTrace:(id)arg3;
- (id)deviceLogImporter;
- (void)setDetailViewType:(unsigned long long)arg1;
- (unsigned long long)detailViewType;
- (id)selectedRun;
- (void)focusOnTime:(unsigned long long)arg1;
- (id)selectedDetailFormatterForColumn:(unsigned long long)arg1;
- (id)selectedEventTitleForColumn:(unsigned long long)arg1;
- (id)selectedEventObjectsForEntries:(const struct XRPowerTimelineEntry *)arg1 count:(unsigned long long)arg2;
- (id)selectedEventTimeline;
- (unsigned long long)selectedEventColumnCount;
- (id)definitionForCurrentDetailView;
- (BOOL)setSelectedRunIndex:(unsigned long long)arg1;
- (void)addData:(id)arg1 toStreamHandle:(id)arg2;
- (void)stopRecording;
- (void)startRecording;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (BOOL)importRun:(id)arg1 fromPaths:(id)arg2 error:(id *)arg3;
- (void)updateViews;
- (void)setInspectionTime:(unsigned long long)arg1;
- (void)configureTrack:(id)arg1;
- (void)setSelectedTimeRange:(struct XRTimeRange)arg1;
- (id)detailElements;
- (id)dataElementsForContext:(id)arg1;
- (id)detailElementsForExtendedDetailViewContext;
- (id)detailElementsForDetailViewContext;
- (id)detailElementsForConfigurationViewContext;
- (id)detailElementsForSetupViewContext;
- (unsigned long long)defaultDetailViewType;
- (unsigned long long)detailViewTypeMask;
- (id)detailViewLabelForType:(unsigned long long)arg1;
- (BOOL)needsStream:(id)arg1;
- (void)enumerateAllStreamsDefinitionsUsingBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithExtension:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRPowerDetailController : NSObject <NSTableViewDataSource>
{
    PFTTableDetailView *_tableView;
    NSScrollView *_scrollView;
    BOOL _descendingTime;
    id _delegate;
}

- (void).cxx_destruct;
- (void)focusOnTime:(unsigned long long)arg1;
- (void)addColumnsToDetailView:(id)arg1;
- (void)tableClicked:(id)arg1;
- (void)_updateTimeHeaderView;
- (id)detailView;
- (void)setDelegate:(id)arg1;
- (void)reloadData;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (id)datumAtObjectIndex:(unsigned long long)arg1;
- (unsigned long long)sortedTimeIndex:(unsigned long long)arg1;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)reconfigureTableView;
- (id)initWithInstrument:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRStreamedPowerRun : XRRun
{
    NSMutableDictionary *_streamTimelines;
    NSMutableDictionary *_streamParsers;
    NSMutableDictionary *_streamArchive;
    BOOL _dropAllRunningStateDataPoints;
    id _delegate;
}

- (void).cxx_destruct;
- (void)setDelegate:(id)arg1;
- (void)flushIntermediates;
- (void)setInstrument:(id)arg1;
- (void)setPath:(id)arg1;
- (void)_copeWithChange;
- (void)addData:(id)arg1 toStream:(id)arg2;
- (void)setStreamParser:(id)arg1 forName:(id)arg2;
- (id)objectsForEntries:(const struct XRPowerTimelineEntry *)arg1 count:(unsigned long long)arg2 inStream:(id)arg3;
- (id)timelineForStream:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XRPowerTimeline : NSObject
{
    unsigned long long _lastIndex;
    unsigned long long _lastTimeOffset;
    unsigned int _count;
    struct XRPowerTimelinePrivate *_p;
    struct {
        char valid;
        struct XRPowerTimelineEntry entry;
    } _lastState;
}

- (BOOL)hasCurrentState;
- (void)enumerateTimeRange:(struct XRTimeRange)arg1 sequenceNumberRange:(struct _NSRange)arg2 block:(CDUnknownBlockType)arg3;
- (unsigned long long)lastTimeOffset;
- (unsigned long long)count;
- (unsigned long long)lastIndex;
- (void)dealloc;
- (id)init;

@end

@interface XRMutablePowerTimeline : XRPowerTimeline
{
}

- (void)synchronizeFile;
- (void)appendStateAtIndex:(unsigned long long)arg1 atTime:(unsigned long long)arg2;
- (void)setIndex:(unsigned long long)arg1 forTimeRange:(struct XRTimeRange)arg2;

@end

@interface XRPowerStreamDefinition : NSObject <NSCopying>
{
    NSString *_name;
    NSString *_streamIdent;
    id <XRStreamedPowerParser> _parser;
}

@property(retain, nonatomic) NSString *streamIdent; // @synthesize streamIdent=_streamIdent;
@property(retain, nonatomic) id <XRStreamedPowerParser> parser; // @synthesize parser=_parser;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) NSIndexSet *columnIndices; // @dynamic columnIndices;
@property(readonly, nonatomic) unsigned long long columnsToDisplayCount; // @dynamic columnsToDisplayCount;
@property(readonly, nonatomic) unsigned long long columnsInDataStreamCount; // @dynamic columnsInDataStreamCount;
- (id)formatterForColumn:(unsigned long long)arg1;
- (id)labelForGraph:(unsigned long long)arg1;
- (id)labelForColumn:(unsigned long long)arg1;
- (id)labelForFloatValue:(double)arg1 forColumnIndex:(unsigned long long)arg2;
- (BOOL)getFloatValue:(double *)arg1 forColumnIndex:(unsigned long long)arg2 usingParserOutput:(id)arg3;
- (unsigned long long)columnForGraphableIndex:(unsigned long long)arg1;
- (unsigned long long)graphableMeasurementCount;
- (void)dealloc;
- (id)initWithDefinition:(id)arg1;

@end

@interface _XRPowerLogBlockObserver : NSObject
{
    NSNumber *_streamID;
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_targetQueue;
}

- (void).cxx_destruct;
- (void)dispatchErrorEvent;
- (void)dispatchEndOfStreamEvent;
- (void)dispatchStreamDataEvent:(id)arg1;
- (id)initWithStreamID:(id)arg1 block:(CDUnknownBlockType)arg2 andQueue:(id)arg3;
- (id)init;

@end

@interface XRPowerLogDownloadAgent : NSObject
{
    DTXChannel *_deviceChannel;
    NSMutableDictionary *_clientsByID;
    NSArray *_instruments;
    NSNumber *_sessionStreamID;
    NSMutableData *_sessionData;
    XRRemoteDevice *_mobileDevice;
    id _myWrapper;
}

+ (id)agentForDevice:(id)arg1;
- (void).cxx_destruct;
- (void)_accessMyIVars:(CDUnknownBlockType)arg1;
- (void)removeObserverForStreamHandle:(id)arg1;
- (void)setMobileRecordingEnabled:(BOOL)arg1;
- (id)initWithDevice:(id)arg1;
- (id)observeStream:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 withQueue:(id)arg3;
- (void)messageReceived:(id)arg1;
- (void)importLatestSession:(id)arg1 toDocument:(id)arg2;

@end

@interface XRActorWrapper : NSProxy
{
    NSObject *_objToGuard;
    NSObject<OS_dispatch_queue> *_queue;
    NSUUID *_myUUID;
}

- (void).cxx_destruct;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)initWithGuardedObject:(id)arg1;

@end

@interface XRStreamedMeasurementParser : NSObject <XRStreamedPowerParser>
{
    XRMeasurementStreamDefinition *_definition;
}

- (void).cxx_destruct;
- (BOOL)getTimeRange:(struct XRTimeRange *)arg1 andLength:(unsigned long long *)arg2 forStreamOffset:(unsigned long long)arg3 inStream:(id)arg4;
- (id)objectForEntry:(const struct XRPowerTimelineEntry *)arg1 inFile:(id)arg2;
- (void)setDefinition:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRPowerDatum : NSObject
{
    struct XRTimeRange _range;
}

@property(readonly, nonatomic) struct XRTimeRange time; // @synthesize time=_range;
- (id)objectValueForColumn:(long long)arg1;
- (id)stringValueForColumn:(long long)arg1;
- (id)stringForTimeColumn:(struct XRTimeRange)arg1;
- (id)labelForGraph:(long long)arg1;
- (id)labelForColumn:(long long)arg1;
- (id)initWithTimeRange:(struct XRTimeRange)arg1;
- (id)init;

@end

@interface XRStreamedEventParser : NSObject <XRStreamedPowerParser>
{
    XRPowerStreamDefinition *_def;
}

- (void).cxx_destruct;
- (id)streamDefinition;
- (void)setDefinition:(id)arg1;
- (BOOL)getTimeRange:(struct XRTimeRange *)arg1 andLength:(unsigned long long *)arg2 forStreamOffset:(unsigned long long)arg3 inStream:(id)arg4;
- (id)objectForEntry:(const struct XRPowerTimelineEntry *)arg1 inFile:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRMeasurementStreamDefinition : XRPowerStreamDefinition
{
    struct XRMeasurementStreamColumn *_columns;
    unsigned char _data_stream_column_count;
    unsigned char _display_column_count;
    NSIndexSet *_column_indices;
}

- (void).cxx_destruct;
- (id)formatterForColumn:(unsigned long long)arg1;
- (id)labelForGraph:(unsigned long long)arg1;
- (id)labelForColumn:(unsigned long long)arg1;
- (id)labelForFloatValue:(double)arg1 forColumnIndex:(unsigned long long)arg2;
- (BOOL)getFloatValue:(double *)arg1 forColumnIndex:(unsigned long long)arg2 usingParserOutput:(id)arg3;
- (unsigned long long)columnForGraphableIndex:(unsigned long long)arg1;
- (id)columnIndices;
- (unsigned long long)columnsToDisplayCount;
- (unsigned long long)columnsInDataStreamCount;
- (unsigned long long)graphableMeasurementCount;
- (void)dealloc;
- (id)initWithDefinition:(id)arg1;

@end

@interface XREventStreamDefinition : XRPowerStreamDefinition
{
    NSFormatter *_formatter;
}

- (void).cxx_destruct;
- (unsigned long long)columnsInDataStreamCount;
- (id)formatterForColumn:(unsigned long long)arg1;
- (id)initWithDefinition:(id)arg1;

@end

@interface XRStateStreamDefinition : XRPowerStreamDefinition
{
    struct XRMeasurementStreamColumnLabel *_stateLabels;
    unsigned char _stateLabelCount;
    NSFormatter *_formatter;
}

- (void).cxx_destruct;
- (unsigned long long)columnsInDataStreamCount;
- (id)formatterForColumn:(unsigned long long)arg1;
- (id)labelForGraph:(unsigned long long)arg1;
- (id)labelForColumn:(unsigned long long)arg1;
- (id)labelForFloatValue:(double)arg1 forColumnIndex:(unsigned long long)arg2;
- (id)initWithDefinition:(id)arg1;

@end

@interface XRStreamedStateParser : NSObject <XRStreamedPowerParser>
{
    XRStateStreamDefinition *_definition;
}

- (void).cxx_destruct;
- (void)setDefinition:(id)arg1;
- (BOOL)getTimeRange:(struct XRTimeRange *)arg1 andLength:(unsigned long long *)arg2 forStreamOffset:(unsigned long long)arg3 inStream:(id)arg4;
- (id)objectForEntry:(const struct XRPowerTimelineEntry *)arg1 inFile:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface XRMeasurementPowerDatum : XRPowerDatum
{
    XRMeasurementStreamDefinition *_definition;
    double *_values;
}

- (void).cxx_destruct;
- (id)streamDefinition;
- (double)valueForColumn:(long long)arg1;
@property(readonly, nonatomic) double *mutableValues;
@property(readonly, nonatomic) unsigned long long valueCount;
- (void)dealloc;
- (id)initWithTimeRange:(struct XRTimeRange)arg1 andMeasStreamDefinition:(id)arg2;

@end

@interface XREventPowerDatum : XRPowerDatum
{
    XRPowerStreamDefinition *_def;
    NSArray *_fields;
}

- (void).cxx_destruct;
- (id)streamDefinition;
- (id)objectValueForColumn:(long long)arg1;
@property(readonly) NSString *family; // @dynamic family;
- (id)initWithTimeRange:(struct XRTimeRange)arg1 fields:(id)arg2 andDefinition:(id)arg3;
- (id)initWithTimeRange:(struct XRTimeRange)arg1 eventString:(id)arg2 andDefinition:(id)arg3;
- (id)initWithTimeRange:(struct XRTimeRange)arg1;

@end

@interface XRStatePowerDatum : XRPowerDatum
{
    XRStateStreamDefinition *_definition;
    unsigned char _state;
}

- (void).cxx_destruct;
- (double)valueForColumn:(long long)arg1;
- (id)streamDefinition;
- (id)initWithTimeRange:(struct XRTimeRange)arg1 state:(unsigned char)arg2 definition:(id)arg3;
- (id)initWithTimeRange:(struct XRTimeRange)arg1;

@end

@interface XRPowerLogDownloader : XRActionHandler
{
}

+ (void)deviceWithNameDoesNotSupportLogging:(id)arg1 usingWindowForSheet:(id)arg2;
+ (void)deviceWithNameHasNoData:(id)arg1 usingWindowForSheet:(id)arg2;
- (void)importFromDeviceTo:(id)arg1 withContext:(id)arg2;
- (BOOL)validateAction:(id)arg1 targets:(id)arg2 context:(id)arg3;

@end

@interface XRPowerLabelFormatter : NSFormatter
{
    const struct XRMeasurementStreamColumnLabel *_labels;
    unsigned char _labelCount;
}

- (id)attributedStringForObjectValue:(id)arg1 withDefaultAttributes:(id)arg2;
- (id)stringForObjectValue:(id)arg1;
- (id)initWithLabels:(const struct XRMeasurementStreamColumnLabel *)arg1 count:(unsigned long long)arg2;

@end

@interface XRPowerAppStateChangeFormatter : NSFormatter
{
}

- (id)attributedStringForObjectValue:(id)arg1 withDefaultAttributes:(id)arg2;
- (id)stringForObjectValue:(id)arg1;

@end

@interface XRAppChangeEventParser : XRStreamedEventParser
{
}

- (id)objectForEntry:(const struct XRPowerTimelineEntry *)arg1 inFile:(id)arg2;

@end

@interface XRAppChangeEventDatum : XREventPowerDatum
{
}

@property(readonly) __weak NSString *stateDescription; // @dynamic stateDescription;
@property(readonly) __weak NSString *appName; // @dynamic appName;
@property(readonly) __weak NSString *execName; // @dynamic execName;
@property(readonly) long long state; // @dynamic state;
@property(readonly) unsigned long long pid; // @dynamic pid;
- (id)objectValueForColumn:(long long)arg1;
- (id)initWithEventPowerDatum:(id)arg1;

@end

@interface XRStreamedPowerInstrumentDecorator : DTTimelineDecorator
{
    XRStreamedPowerRun *_run;
    unsigned long long _graphIndex;
    XRPowerStreamDefinition *_definition;
    BOOL _stateGraph;
}

- (void).cxx_destruct;
- (id)decorateInspectionRanges:(id)arg1;
- (BOOL)mustDecorateOnMainThread;
- (id)decorateContainer:(struct DTTimelineDecorationContainer *)arg1;
- (void)setDefaultsForPlane:(id)arg1;
- (id)initWithRun:(id)arg1 graphIndex:(unsigned long long)arg2 definition:(id)arg3;
- (id)init;

@end

#endif /* XRPowerInstrument_xrplugin_h */
